#pragma once
#include <array>
#include <stdint.h>
#include <vector>
#include <assert.h>

#include "uuid.h"
#include "forward.h"
#include "../../nomad-util/source/geometric.h"

namespace game
{
struct game_t;
struct game_view_t;

// game_t represents the entire game world state.  each player should have an
// identical copy of this game state.
struct game_t {
    // dtor
    virtual ~game_t()
    {
    }

    // called for each game event received by the event relay
    virtual void recv(const event::event_t & event) = 0;

    // return a view of the game for a partivular player
    virtual struct game_view_t * get_view(uuid::player_uuid_t) = 0;
};

// hints generated by game_t to provide visual and auditory cues to player_t
struct cue_t {
    uint32_t type_;
};

//
enum tile_flags_t {
    e_fow      = 0x1,
    e_hidden   = 0x2,
    e_passible = 0x4,
};

// map information structure
struct map_info_t {
    uint32_t  width_;  // size in cells
    uint32_t  height_;
    float *   vertex_;   // (width_+1) * (height_+1)
    uint8_t * texture_;  // cell texture
    uint8_t * flags_;    // cell flags
};

// map generator
struct generator_t {
    // generate vertices
    // crave
};

// abstracts a player_t's unique view of the game_t state.
struct game_view_t {
    // ctor
    game_view_t(game_t & game, uuid::player_uuid_t uuid)
        : game_(game)
        , uuid_(uuid)
    {
    }

    // dtor
    virtual ~game_view_t()
    {
    }

    // query for objects in a rectangular region
    virtual bool query_obj_rect_map(
        const geom::rect2i_t & in,
        std::vector<object::object_ref_t> & out) = 0;

    // query for objects in a given radius
    virtual bool query_obj_radius_map(
        const geom::vec2i_t & in, const int32_t radius,
        std::vector<object::object_ref_t> & out) = 0;

    // lookup object via its uuid
    virtual const object::object_ref_t lookup(uuid::object_uuid_t uuid) = 0;

    // get map tile information
    virtual bool get_map_info(const geom::rect2i_t & in, map_info_t & out) = 0;

   protected:
    struct game_t &           game_;
    const uuid::player_uuid_t uuid_;
};

}  // namespace nomad
